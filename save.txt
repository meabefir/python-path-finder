import pygame, sys, time

pygame.init()
#screen_size = (int(pygame.display.Info().current_w*.83),int(pygame.display.Info().current_h*.83))
screen_size = (1000, 600)
print(screen_size)
screen = pygame.display.set_mode(screen_size)#,pygame.FULLSCREEN)

font = pygame.font.SysFont('calibri', 16)

colors = {'black': (0, 0, 0), 'blue': (0, 0, 255), 'red': (255, 0, 0), -1: (0, 0, 0), 's': (255, 0, 0),
          'e': (0, 255, 0), 0: (255, 255, 255),'yellow':(255,255,0),'t':(255,255,0),'v':(0,0,255)}
values = {'wall': -1, 'start': 's', 'end': 'e'}

button_width = 150
button_height = 60
size = 30


class Text():
    def set_text_size(self, text):
        text_rect = text.get_rect()
        return ((text_rect[2] - text_rect[0], text_rect[3] - text_rect[1]))

    def draw_text(self, text_render, x_off=0, y_off=0, color=colors['black'], centered=1):
        if not isinstance(text_render, pygame.Surface):
            if type(text_render) is type([]):
                text_render = " ".join([str(el.name) for el in text_render])
                text_render = font.render(text_render, True, color)
            else:
                text_render = font.render(str(text_render), True, color)
        text_size = self.set_text_size(text_render)
        screen.blit(text_render,
                    (self.rect.x - (text_size[0] // 2) * centered + x_off,
                     self.rect.y - (text_size[1] // 2) * centered + y_off))


class PathFinder():
    def __init__(self, grid_size):
        self.generating = False
        self.last_iteration = time.time()
        self.iteration_delay = .0001
        self.x = 0
        self.y = 0
        self.size = screen_size[1]
        self.rows = grid_size
        self.cols = grid_size
        self.cell_size = self.size // self.rows
        self.start = None
        self.end = None
        self.matrix = [[Cell(self, x, y) for x in range(self.rows)] for y in range(self.rows)]

    def update(self):
        for row in self.matrix:
            for cell in row:
                cell.update()
        if self.generating:
            self.iterate_generation()

    def draw(self):
        for row in self.matrix:
            for cell in row:
                cell.draw()

    def clear_cells(self):
        for row in self.matrix:
            for cell in row:
                cell.reset()
        self.start = None
        self.end = None

    def iterate_generation(self):
        if (time.time() - self.last_iteration) > self.iteration_delay:
            self.last_iteration = time.time()
            try:
                next(self.generator)
            except Exception as e:
                self.generating = False
                # PRINT TRAIL
                print(self.end.trail,'from heere')
                curr = self.end
                while curr.trail != 0:
                    print(curr.trail)
                    curr.value = 't'
                    curr.set_color(colors['yellow'])
                    dx = [1, 0, -1, 0]
                    dy = [0, 1, 0, -1]
                    for i in range(4):
                        if self.rows > curr.col+dx[i] >= 0 and self.rows > curr.row+dy[i] >= 0:
                            if self.matrix[curr.col+dx[i]][curr.row+dy[i]].trail == curr.trail-1:
                                curr = self.matrix[curr.col+dx[i]][curr.row+dy[i]]
                                break

    def find_path(self,method):
        self.generator = method()
        self.search_que = []
        self.generating = True

    def visit(self,pos):
        xx,yy = pos
        #if visited
        if self.matrix[xx][yy].value == -1 or self.matrix[xx][yy].visited:
            self.search_que.pop(0)
            return

        yield
        # if end
        if self.matrix[xx][yy].value == 'e':
            self.search_que = []
            return

        self.matrix[xx][yy].visited = True
        if self.matrix[xx][yy].value != 's':
            self.matrix[xx][yy].value = 'v'

        dx = [-1, 0, 1, 0]
        dy = [0, 1, 0, -1]
        for i in range(4):
                visit_x = xx+dx[i]
                visit_y = yy+dy[i]
                if self.rows > visit_x >= 0 and self.rows > visit_y >= 0:
                    if not self.matrix[visit_x][visit_y].visited:
                        self.matrix[visit_x][visit_y].trail = self.matrix[xx][yy].trail + 1
                        self.search_que.append((visit_x,visit_y))
        self.search_que.pop(0)

    def brute_force(self):

        current_pos = (self.start.col,self.start.row)

        self.search_que.append(current_pos)
        while len(self.search_que):
            yield from self.visit(self.search_que[0])



class Cell(Text):
    default_color = (255, 255, 255)

    def __init__(self, path_finder, row, col):
        self.trail = 0
        self.visited = False
        self.last_change = time.time()
        self.value = 0
        self.path_finder = path_finder
        self.row = row
        self.col = col
        self.color = Cell.default_color
        self.rect = pygame.Rect(path_finder.x + self.col * path_finder.cell_size,
                                path_finder.y + self.row * path_finder.cell_size,
                                self.path_finder.cell_size,
                                self.path_finder.cell_size)
        self.name = f'{self.row};{self.col}'

    def __str__(self):
        return self.name

    def set_color(self,color):
        self.color = color

    def update(self):
        if mouse.held and time.time() - self.last_change > .1 and self.rect.collidepoint(mouse.x, mouse.y) and gui.active_gui is not None:
            self.last_change = time.time()
            if self.value == values[gui.active_gui.name]:
                self.value = 0
            else:
                self.value =values[gui.active_gui.name]
            if self.value == 's':
                if self.path_finder.start is not None and self.path_finder.start != self:
                    self.path_finder.start.value = 0
                self.path_finder.start = self
            if self.value == 'e':
                if self.path_finder.end is not None and self.path_finder.end != self:
                    self.path_finder.end.value = 0
                self.path_finder.end = self
        self.color = colors[self.value]

    def reset(self):
        self.value = 0
        self.visited = False
        self.trail = 0

    def draw(self):
        pygame.draw.rect(screen, self.color, self.rect)
        pygame.draw.rect(screen, colors['black'], self.rect, 2)
        #self.draw_text(self.name, centered=0)
        if self.trail != 0:
            self.draw_text(self.trail, self.path_finder.cell_size/2,self.path_finder.cell_size/2,centered=1)


class GUI():
    def __init__(self):
        self.x = screen_size[1]
        self.y = 0
        self.rect = pygame.Rect(self.x, self.y, screen_size[0] - screen_size[1], screen_size[1])
        self.active_gui = None
        self.gui_elements_names = ['wall', 'start', 'end','clear','brute-force']
        self.gui_elements = [
            GUIElement(self, self.gui_elements_names[i], self.rect.x + (self.rect.w - button_width) / 2,
                       self.rect.y + button_height * (i) * 1.2) for i in range(len(self.gui_elements_names))]

    def update(self):
        for gui_element in self.gui_elements:
            gui_element.update()

    def draw(self):
        pygame.draw.rect(screen, (255, 0, 0), self.rect)
        pygame.draw.rect(screen, (255, 255, 0), self.rect, 2)
        for gui_element in self.gui_elements:
            gui_element.draw()


class GUIElement(Text):
    highlight_color = colors['blue']
    default_color = colors['red']

    def __init__(self, gui, name, x, y):
        self.gui = gui
        self.name = name
        self.rect = pygame.Rect(x, y, button_width, button_height)
        self.color = self.default_color

    def draw(self):
        pygame.draw.rect(screen, self.color, self.rect)
        pygame.draw.rect(screen, (255, 255, 0), self.rect, 2)
        self.draw_text(self.name, self.rect.w / 2, self.rect.h / 2)

    def update(self):
        if mouse.clicked and self.rect.collidepoint(mouse.x, mouse.y):
            if self.name in ['start', 'end', 'wall']:
                self.gui.active_gui = self
                self.color = self.highlight_color
            elif self.name == 'clear':
                path_finder.clear_cells()
            elif self.name == 'brute-force':
                if path_finder.end is not None and path_finder.start is not None:
                    path_finder.find_path(path_finder.brute_force)
        if self.gui.active_gui != self:
            self.color = self.default_color


class Mouse():
    def __init__(self):
        self.x = 0
        self.y = 0
        self.held = False
        self.clicked = False

    def update(self):
        self.x, self.y = pygame.mouse.get_pos()
        inp = pygame.mouse.get_pressed()
        self.clicked = False
        if self.held == False and inp[0] == 1:
            self.clicked = True
        self.held = True if inp[0] == 1 else False


path_finder = PathFinder(size)
gui = GUI()
mouse = Mouse()
while True:
    screen.fill((0, 0, 0))

    # pygame.draw.rect(screen,(255,0,0),(0,0,screen_size[0],screen_size[1]),3)
    mouse.update()
    gui.update()
    path_finder.update()

    path_finder.draw()
    gui.draw()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                pygame.quit()
                sys.exit()
            if event.key == pygame.K_i:
                print(path_finder.start)

    pygame.display.update()
